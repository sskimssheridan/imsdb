DROP TABLE MACHINE_TECHNICIAN;
DROP TABLE LAB_TECHNICIAN;
DROP TABLE USAGE_HISTORY;
DROP TABLE BOOKING_CANCELLATION;
DROP TABLE BOOKING;
DROP TABLE LAB_MACHINERY;
DROP TABLE PROGRAM_ITEM_VIEW_ALLOWED;
DROP TABLE ITEM_ORDER;
DROP TABLE SUPPLIER_ITEM;
DROP TABLE SUPPLIER;
DROP TABLE STUDENT_REQUEST_FOR_ITEM;
DROP TABLE EMPLOYEE_SPECIALIZATION;
DROP TABLE EMPLOYEE_WORKING_HOURS;
DROP TABLE ITEM_DETAIL;
DROP TABLE MANUFACTURER;
DROP TABLE ITEM_HOLD;
DROP TABLE ITEM_BORROW;
DROP TABLE MACHINERY;
DROP TABLE ITEM_DAMAGE_INFORMATION;
DROP TABLE ITEM_MAINTENANCE;
DROP TABLE ITEM_ADDITIONAL_DESCRIPTION;
DROP TABLE ITEM;
DROP TABLE LAB;
DROP TABLE EMPLOYEE;
DROP TABLE CATEGORY;
DROP TABLE CAMPUS_PROGRAM;
DROP TABLE STUDENT_PROGRAM;
DROP TABLE STUDENT;
DROP TABLE CAMPUS;
DROP TABLE PROGRAM;


/* 2. Program
*/
CREATE TABLE PROGRAM
(PROGRAM_CODE CHAR(8) PRIMARY KEY,
PNAME VARCHAR(100) NOT NULL,
NUMBER_OF_YEAR NUMBER(1));

INSERT INTO PROGRAM (PROGRAM_CODE, PNAME, NUMBER_OF_YEAR ) VALUES ('PELTY', 'ELECTRONICS ENGINEERING TECHNICIAN - TECHNOLOGY', '3');
INSERT INTO PROGRAM (PROGRAM_CODE, PNAME, NUMBER_OF_YEAR ) VALUES ('PMTTM', 'MECHANICAL TECHNICIAN - TOOL MAKING', '3');
INSERT INTO PROGRAM (PROGRAM_CODE, PNAME, NUMBER_OF_YEAR ) VALUES ('PEMTY', 'ELECTROMECHANICAL ENGINEERING TECHNICIAN - TECHNOLOGY', '3');
INSERT INTO PROGRAM (PROGRAM_CODE, PNAME, NUMBER_OF_YEAR ) VALUES ('PMEDD', 'MECHANICAL ENGINEERING TECHNICIAN TECHNOLOGY - DESIGN AND DRAFTING', '3');
INSERT INTO PROGRAM (PROGRAM_CODE, PNAME, NUMBER_OF_YEAR ) VALUES ('PQUAS', 'QUALITY ASSURANCE - MANUFACTURING AND MANAGEMENT', '1');



/* 1. Campus
*/
CREATE TABLE CAMPUS
(CAMPUS_ID CHAR(2) PRIMARY KEY,
CNAME VARCHAR(50) NOT NULL,
CAMPUS_LOCATION CHAR(20));

INSERT INTO CAMPUS (CAMPUS_ID, CNAME, CAMPUS_LOCATION ) VALUES ('D', 'DAVIS CAMPUS', 'BRAMPTON');
INSERT INTO CAMPUS (CAMPUS_ID, CNAME, CAMPUS_LOCATION ) VALUES ('T', 'TRAFALGAR ROAD CAMPUS', 'OAKVILLE');
INSERT INTO CAMPUS (CAMPUS_ID, CNAME, CAMPUS_LOCATION ) VALUES ('H', 'HAZEL MCCALLION CAMPUS', 'MISSISSAUGA');


/* 3. Student
   STATUS A=ACTIVE I=INACTIVE S= SUSPENDED
*/
CREATE TABLE STUDENT
(STUDENT_ID CHAR(9) PRIMARY KEY,
PROGRAM_CODE CHAR(8) REFERENCES PROGRAM(PROGRAM_CODE),
CAMPUS_ID CHAR(2) REFERENCES CAMPUS(CAMPUS_ID),
SNAME VARCHAR(20) NOT NULL,
STATUS CHAR(1) CHECK (STATUS IN('A', 'I', 'S')) NOT NULL,
PASSWORD VARCHAR(15) NOT NULL,
PHONE VARCHAR(13),
EMAIL VARCHAR(30));

INSERT INTO STUDENT (STUDENT_ID, PROGRAM_CODE, CAMPUS_ID, SNAME, STATUS, PASSWORD, PHONE, EMAIL ) VALUES ('000000009', 'PELTY', 'D', 'STUDENT A', 'A', 'PASSWORD', '647-419-9055','STUDENTA@SHERIDANCOLLEGE.CA');
INSERT INTO STUDENT (STUDENT_ID, PROGRAM_CODE, CAMPUS_ID, SNAME, STATUS, PASSWORD, PHONE, EMAIL ) VALUES ('000000008', 'PMTTM', 'D', 'STUDENT B', 'A', 'PASSWORD', '647-419-9055','STUDENTB@SHERIDANCOLLEGE.CA');
INSERT INTO STUDENT (STUDENT_ID, PROGRAM_CODE, CAMPUS_ID, SNAME, STATUS, PASSWORD, PHONE, EMAIL ) VALUES ('000000007', 'PEMTY', 'T', 'STUDENT C', 'A', 'PASSWORD', '647-419-9055','STUDENTC@SHERIDANCOLLEGE.CA');
INSERT INTO STUDENT (STUDENT_ID, PROGRAM_CODE, CAMPUS_ID, SNAME, STATUS, PASSWORD, PHONE, EMAIL ) VALUES ('000000006', 'PMEDD', 'T', 'STUDENT D', 'A', 'PASSWORD', '647-419-9055','STUDENTD@SHERIDANCOLLEGE.CA');
INSERT INTO STUDENT (STUDENT_ID, PROGRAM_CODE, CAMPUS_ID, SNAME, STATUS, PASSWORD, PHONE, EMAIL ) VALUES ('000000005', 'PQUAS', 'H', 'STUDENT E', 'A', 'PASSWORD', '647-419-9055','STUDENTE@SHERIDANCOLLEGE.CA');


/* 4. Student Program
*/
CREATE TABLE STUDENT_PROGRAM
(STUDENT_ID CHAR(9) REFERENCES STUDENT(STUDENT_ID),
PROGRAM_CODE CHAR(8) REFERENCES PROGRAM(PROGRAM_CODE),
CONSTRAINT PKSP PRIMARY KEY (STUDENT_ID,PROGRAM_CODE));


/* 5. Campus Program
*/
CREATE TABLE CAMPUS_PROGRAM
(CAMPUS_ID CHAR(2) REFERENCES CAMPUS(CAMPUS_ID),
PROGRAM_CODE CHAR(8) REFERENCES PROGRAM(PROGRAM_CODE),
CONSTRAINT PKCP PRIMARY KEY (CAMPUS_ID,PROGRAM_CODE));

INSERT INTO CAMPUS_PROGRAM (CAMPUS_ID, PROGRAM_CODE ) VALUES ('D', 'PELTY');
INSERT INTO CAMPUS_PROGRAM (CAMPUS_ID, PROGRAM_CODE ) VALUES ('D', 'PMTTM');
INSERT INTO CAMPUS_PROGRAM (CAMPUS_ID, PROGRAM_CODE ) VALUES ('T', 'PEMTY');
INSERT INTO CAMPUS_PROGRAM (CAMPUS_ID, PROGRAM_CODE ) VALUES ('T', 'PMEDD');
INSERT INTO CAMPUS_PROGRAM (CAMPUS_ID, PROGRAM_CODE ) VALUES ('H', 'PQUAS');


/* 6. Category
*/
CREATE TABLE CATEGORY
(CATEGORY_ID CHAR(6) PRIMARY KEY,
CATEGORY_TYPE VARCHAR(20) NOT NULL);

INSERT INTO CATEGORY (CATEGORY_ID, CATEGORY_TYPE ) VALUES ('M', 'MACHINERY');
INSERT INTO CATEGORY (CATEGORY_ID, CATEGORY_TYPE ) VALUES ('H', 'HANDTOOLS');
INSERT INTO CATEGORY (CATEGORY_ID, CATEGORY_TYPE ) VALUES ('C', 'CONSUMABLES');
INSERT INTO CATEGORY (CATEGORY_ID, CATEGORY_TYPE ) VALUES ('A', 'ASSET');
INSERT INTO CATEGORY (CATEGORY_ID, CATEGORY_TYPE ) VALUES ('E', 'INSPECTION EQUIPMENT');

/* 7. Employee (EROLE IS THE DESIGNATION GIVEN TO EACH EMPLOYEE, EG: LAB TECH, FACULTY, ETC.)
*/
CREATE TABLE EMPLOYEE 
(EMPLOYEE_ID CHAR(9) PRIMARY KEY,
ENAME VARCHAR(30),
EROLE VARCHAR(30),
EMAIL VARCHAR(30),
EXT VARCHAR(5),
PASSWORD VARCHAR(15) NOT NULL);

INSERT INTO EMPLOYEE (EMPLOYEE_ID, ENAME, EROLE, EMAIL, EXT, PASSWORD) VALUES ('000000001', 'EMPLOYEE A', 'ADMINISTRATOR', 'EMPLOYEEA@SHERIDANCOLLEGE.CA', '1234', 'PASSWORD');
INSERT INTO EMPLOYEE (EMPLOYEE_ID, ENAME, EROLE, EMAIL, EXT, PASSWORD) VALUES ('000000002', 'EMPLOYEE B', 'TECHNICIAN', 'EMPLOYEEB@SHERIDANCOLLEGE.CA', '1235', 'PASSWORD');
INSERT INTO EMPLOYEE (EMPLOYEE_ID, ENAME, EROLE, EMAIL, EXT, PASSWORD) VALUES ('000000003', 'EMPLOYEE C', 'TECHNICIAN', 'EMPLOYEEC@SHERIDANCOLLEGE.CA', '1236', 'PASSWORD');
INSERT INTO EMPLOYEE (EMPLOYEE_ID, ENAME, EROLE, EMAIL, EXT, PASSWORD) VALUES ('000000004', 'EMPLOYEE E', 'FACULTY', 'EMPLOYEEE@SHERIDANCOLLEGE.CA', '1238', 'PASSWORD');


/* 8. Lab 
*/
CREATE TABLE LAB(LAB_ID CHAR(2) CHECK (LAB_ID IN ('MC','EL','CH','RB','AR')) NOT NULL PRIMARY KEY,
CAMPUS_ID CHAR(2) REFERENCES CAMPUS(CAMPUS_ID),
HEAD_TECHNICIAN CHAR(9) NOT NULL UNIQUE,
FOREIGN KEY(HEAD_TECHNICIAN) REFERENCES EMPLOYEE(EMPLOYEE_ID));

INSERT INTO LAB (LAB_ID, CAMPUS_ID, HEAD_TECHNICIAN) VALUES ('MC', 'D', '000000001');
INSERT INTO LAB (LAB_ID, CAMPUS_ID, HEAD_TECHNICIAN) VALUES ('EL', 'D', '000000002');
INSERT INTO LAB (LAB_ID, CAMPUS_ID, HEAD_TECHNICIAN) VALUES ('CH', 'T', '000000003');
INSERT INTO LAB (LAB_ID, CAMPUS_ID, HEAD_TECHNICIAN) VALUES ('RB', 'T', '000000004');
INSERT INTO LAB (LAB_ID, CAMPUS_ID, HEAD_TECHNICIAN) VALUES ('AR', 'H', '000000005');


/* 9. Item
*/
CREATE TABLE ITEM
(ITEM_ID CHAR(6)PRIMARY KEY,
CATEGORY_ID CHAR(6) REFERENCES CATEGORY(CATEGORY_ID),
CAMPUS_ID CHAR(2) REFERENCES CAMPUS(CAMPUS_ID),
LAB_ID CHAR(2) REFERENCES LAB(LAB_ID),
CONTAINER_CODE VARCHAR(5),
IMAGE BLOB,
QUANTITY NUMBER(5) CHECK (QUANTITY >= 0) NOT NULL,
MIN_QUANTITY NUMBER(5) CHECK (MIN_QUANTITY >= 0) NOT NULL,
STATUS VARCHAR(15) NOT NULL,
DESCRIPTION VARCHAR(4000),
BARCODE BLOB);


/* 10. Item Additional Description
*/
CREATE TABLE ITEM_ADDITIONAL_DESCRIPTION
(ITEM_ID CHAR(6) NOT NULL REFERENCES ITEM(ITEM_ID),
DESCRIPTION_FIELD VARCHAR(100) NOT NULL,
DESCRIPTION_VALUE VARCHAR(4000) NOT NULL);

/* 11. Item Maintenance
*/
CREATE TABLE ITEM_MAINTENANCE
(ITEM_ID CHAR(6) REFERENCES ITEM(ITEM_ID),
MAINTENANCE_START_DATE DATE,
MAINTENANCE_END_DATE DATE,
MAINTENANCE_DESCRIPTION VARCHAR(4000));


/* 12. Item Damage Information
*/
CREATE TABLE ITEM_DAMAGE_INFORMATION
(ITEM_ID CHAR(6) REFERENCES ITEM(ITEM_ID),
DAMAGE_DESCRIPTION VARCHAR(4000) NOT NULL,
DAMAGE_DATE DATE);

/* 13. Machinery
*/
CREATE TABLE MACHINERY
(MACHINERY_ITEM_ID CHAR(6) REFERENCES ITEM(ITEM_ID),
MACHINERY_CONTAINING_ITEM_ID CHAR(6) REFERENCES ITEM(ITEM_ID),
CONSTRAINT PKM PRIMARY KEY (MACHINERY_ITEM_ID,MACHINERY_CONTAINING_ITEM_ID));

/* 14. Student Item Borrow
   ITEM_STATUS A=AVAILABLE N=NOT AVAILABLE
   ITEM_STATE N=NORMAL D=DAMAGED
*/
CREATE TABLE ITEM_BORROW
(USER_ID CHAR(9),
ITEM_ID CHAR(6) REFERENCES ITEM(ITEM_ID),
DATE_OF_BORROW DATE,
DATE_OF_RETURN DATE,
QUANTITY_BORROWED NUMBER(3),
ITEM_STATUS CHAR(1) CHECK (ITEM_STATUS IN ('A','N')),
ITEM_STATE CHAR(1)CHECK (ITEM_STATE IN ('N','D')),
CONSTRAINT PKSIB PRIMARY KEY (USER_ID,ITEM_ID,DATE_OF_BORROW));

/* 15. Student Item Hold
*/
CREATE TABLE ITEM_HOLD
(USER_ID CHAR(9),
ITEM_ID CHAR(6) REFERENCES ITEM(ITEM_ID),
DATE_OF_HOLD TIMESTAMP (6),
QUANTITY_HOLD NUMBER(3),
NOTIFIED_BY_EMAIL CHAR(1) CHECK(NOTIFIED_BY_EMAIL IN ('Y','N')));

/* 16. Manufacturer
*/
CREATE TABLE MANUFACTURER 
(MANUFACTURER_ID CHAR(6) PRIMARY KEY,
MNAME VARCHAR(30),
EMAIL VARCHAR(30),
PHONE VARCHAR(13),
ADDRESS VARCHAR(100));

/* 17. Item Detail
*/
CREATE TABLE ITEM_DETAIL
(ITEM_ID CHAR(6) REFERENCES ITEM(ITEM_ID),
MANUFACTURER_ID CHAR(6) REFERENCES MANUFACTURER(MANUFACTURER_ID),
WARRANTY_INFORMATION VARCHAR(50),
PRODUCT_CODE VARCHAR(15),
PURCHASE_DATE DATE NOT NULL,
PRICE NUMBER(9,2),
EXPIRY_DATE DATE,
CONSTRAINT PKID PRIMARY KEY (ITEM_ID));

/* 18. Employee_Working_Hours
*/
CREATE TABLE EMPLOYEE_WORKING_HOURS(SCHEDULE_ID CHAR(6) NOT NULL PRIMARY KEY,
TIME_IN TIMESTAMP, 
TIME_OUT TIMESTAMP,
DATE_FIELD DATE, 
EMPLOYEE_ID CHAR(9),
FOREIGN KEY(EMPLOYEE_ID) REFERENCES EMPLOYEE(EMPLOYEE_ID));

/* 19. Employee Specialization
*/
CREATE TABLE EMPLOYEE_SPECIALIZATION
(EMPLOYEE_ID CHAR(9) REFERENCES EMPLOYEE(EMPLOYEE_ID),
SKILLS VARCHAR(300),
CONSTRAINT PKES PRIMARY KEY (EMPLOYEE_ID));

/* 20. Student Request For Item (Items which need approval)
*/
CREATE TABLE STUDENT_REQUEST_FOR_ITEM
(SRI_ID CHAR(6) PRIMARY KEY,
STUDENT_ID CHAR(9) REFERENCES STUDENT(STUDENT_ID),
ITEM_ID CHAR(6) REFERENCES ITEM(ITEM_ID),
EMPLOYEE_ID CHAR(9) REFERENCES EMPLOYEE(EMPLOYEE_ID),
DATE_OF_REQUEST DATE,
STATUS CHAR(1) CHECK(STATUS IN ('A', 'D', 'P')));

/* 21. Supplier
*/
CREATE TABLE SUPPLIER
(SUPPLIER_ID CHAR(6) PRIMARY KEY,
SNAME VARCHAR(30),
EMAIL VARCHAR(30),
PHONE VARCHAR(13),
ADDRESS VARCHAR(100));

/* 22. Supplier Item
*/
CREATE TABLE SUPPLIER_ITEM
(ITEM_ID CHAR(6) REFERENCES ITEM(ITEM_ID),
SUPPLIER_ID CHAR(6) REFERENCES SUPPLIER(SUPPLIER_ID),
CONSTRAINT PKSI PRIMARY KEY (ITEM_ID,SUPPLIER_ID));

/* 23. Item Order
*/
CREATE TABLE ITEM_ORDER
(ITEM_ORDER_ID CHAR(6) PRIMARY KEY,
SUPPLIER_ID CHAR(6) NOT NULL REFERENCES SUPPLIER(SUPPLIER_ID),
ITEM_ID CHAR(6) NOT NULL REFERENCES ITEM(ITEM_ID),
EMPLOYEE_ID CHAR(9) NOT NULL REFERENCES EMPLOYEE(EMPLOYEE_ID),
DATE_OF_ORDER DATE NOT NULL,
PURPOSE_OF_ORDER VARCHAR(100),
ORDER_ITEM_QUANTITY NUMBER(5) CHECK (ORDER_ITEM_QUANTITY > 0)NOT NULL,
DESCRIPTION VARCHAR(4000),
ORDER_STATUS VARCHAR(15) NOT NULL);

/* 24. Program Item View Allowed 
*/
CREATE TABLE PROGRAM_ITEM_VIEW_ALLOWED
(PROGRAM_CODE CHAR(8) REFERENCES PROGRAM(PROGRAM_CODE),
LAB_ID CHAR(2) REFERENCES LAB(LAB_ID));

/* 25. Lab Machinery
*/
CREATE TABLE LAB_MACHINERY(
LAB_ID CHAR(2) REFERENCES LAB(LAB_ID),
MACHINERY_ITEM_ID CHAR(6) REFERENCES ITEM(ITEM_ID));

/* 26. Booking
*/
CREATE TABLE BOOKING(BOOKING_ID CHAR(6) NOT NULL PRIMARY KEY,
MACHINERY_ITEM_ID CHAR(6) NOT NULL UNIQUE,
LAB_ID CHAR(2) NOT NULL UNIQUE,
STUDENT_ID CHAR(9) NOT NULL UNIQUE,
EMPLOYEE_ID CHAR(9) NOT NULL UNIQUE,
BOOKING_STARTTIME TIMESTAMP,
BOOKING_ENDTIME TIMESTAMP,
BOOKING_DESC VARCHAR(45),
ASSIGNED_EMPLOYEE CHAR(9),
REQUEST_APPROVAL_STATUS CHAR(1) CHECK(REQUEST_APPROVAL_STATUS IN ('A', 'D', 'P')),
NOTIFIED_BY_EMAIL CHAR(1) CHECK(NOTIFIED_BY_EMAIL IN ('Y','N')),
BOOKING_DATE DATE,
FOREIGN KEY(MACHINERY_ITEM_ID) REFERENCES ITEM(ITEM_ID),
FOREIGN KEY(LAB_ID) REFERENCES LAB(LAB_ID),
FOREIGN KEY(STUDENT_ID) REFERENCES STUDENT(STUDENT_ID),
FOREIGN KEY(EMPLOYEE_ID) REFERENCES EMPLOYEE(EMPLOYEE_ID),
FOREIGN KEY(ASSIGNED_EMPLOYEE) REFERENCES EMPLOYEE(EMPLOYEE_ID));

/* 27. Booking Cancellation
*/
CREATE TABLE BOOKING_CANCELLATION(CANCELLATION_ID CHAR(6) NOT NULL PRIMARY KEY,
BOOKING_ID CHAR(6) NOT NULL UNIQUE,
CANCELLATION_TIME TIMESTAMP,
FOREIGN KEY(BOOKING_ID) REFERENCES BOOKING(BOOKING_ID));

/* 28. Usage_History (VIEW)
*/
CREATE VIEW USAGE_HISTORY 
AS
SELECT BOOKING_ID, (BOOKING_ENDTIME - BOOKING_STARTTIME) FROM BOOKING;


/* 29. Lab Technician
*/
CREATE TABLE LAB_TECHNICIAN(LAB_ID CHAR(2) NOT NULL UNIQUE,
EMPLOYEE_ID CHAR(9) NOT NULL UNIQUE,
FOREIGN KEY(LAB_ID) REFERENCES LAB(LAB_ID),
FOREIGN KEY(EMPLOYEE_ID) REFERENCES EMPLOYEE(EMPLOYEE_ID));

/* 30. Machine Technician
*/
CREATE TABLE MACHINE_TECHNICIAN(EMPLOYEE_ID CHAR(9) NOT NULL UNIQUE,
MACHINERY_ITEM_ID CHAR(6) NOT NULL UNIQUE,
FOREIGN KEY(MACHINERY_ITEM_ID) REFERENCES ITEM(ITEM_ID),
FOREIGN KEY(EMPLOYEE_ID) REFERENCES EMPLOYEE(EMPLOYEE_ID));
